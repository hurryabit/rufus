use std::str::FromStr;

use crate::syntax::*;

grammar;

pub Expr: Expr = {
    "let" <Name> "=" <Box<Expr>> ";" <Box<Expr>> => Expr::Let(<>),
    <SimpleExpr>,
};

SimpleExpr: Expr = {
    <x:Box<SimpleExpr>> <op:SumOp> <y:Box<ProductExpr>> => Expr::Op(op, x, y),
    ProductExpr,
}

ProductExpr: Expr = {
    <x:Box<ProductExpr>> <op:ProductOp> <y:Box<AtomExpr>> => Expr::Op(op, x, y),
    AtomExpr,
}

AtomExpr: Expr = {
    Name => Expr::Var(<>, None),
    Num => Expr::Num(<>),
    <f:Name> "(" <xs:List0<SimpleExpr, ",">> ")" => Expr::App(Box::new(Expr::Var( f, None)), xs),
    "|" <List0<Name, ",">> "|" "{" <Box<Expr>> "}" => Expr::Lam(<>),
    "print" "(" <Box<SimpleExpr>> ")" => Expr::Print(<>),
    "(" <SimpleExpr> ")",
    "{" <Expr> "}",
    "{" <List0<RecordAssign, ",">> "}" => Expr::Record(<>),
    <Box<AtomExpr>> "." <Name> => Expr::Proj(<>),
};

RecordAssign: (Name, Expr) = {
    <Name> ":" <Expr> => (<>)
}

Name: Name = {
    r"[a-z]\w*" => Name(<>.to_string())
};

Num: i64 = {
    r"[0-9]+" => i64::from_str(<>).unwrap()
};

SumOp: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
}

ProductOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
}

Box<T>: Box<T> = {
    <T> => Box::new(<>)
}

List0<T, Sep>: Vec<T> = {
    => Vec::new(),
    <ts:(<T> ",")*> <t:T> => {
        let mut ts = ts;
        ts.push(t);
        ts
    }
}
