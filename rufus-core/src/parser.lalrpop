use std::str::FromStr;

use crate::syntax::*;

grammar;

pub Expr: Expr = {
    SumExpr,
    "fun" <Name+> "->" <Box<Expr>> => Expr::Lam(<>),
    "let" <Name> "=" <Box<Expr>> "in" <Box<Expr>> => Expr::Let(<>),
    "if" <Box<Expr>> "then" <Box<Expr>> "else" <Box<Expr>> => Expr::If(<>),
    BinOp<SumExpr, CompOp, SumExpr>,
}

SumExpr: Expr = {
    BinOp<SumExpr, SumOp, ProductExpr>,
    ProductExpr,
}

ProductExpr: Expr = {
    BinOp<ProductExpr, ProductOp, AppExpr>,
    AppExpr,
}

AppExpr: Expr = {
    AtomExpr,
    Box<AtomExpr> AtomExpr+ => Expr::App(<>),
}

AtomExpr: Expr = {
    Name => Expr::Var(<>, None),
    Num => Expr::Num(<>),
    Bool => Expr::Bool(<>),
    "(" <Expr> ")",
    "{" <fes:List0<RecordAssign, ";">> "}" => {
        let (fs, es) = fes.into_iter().unzip();
        Expr::Record(fs, es)
    },
    <Box<AtomExpr>> "." <Name> => Expr::Proj(<>),
}

RecordAssign: (Name, Expr) = {
    <Name> "=" <Expr> => (<>),
}

Name: Name = {
    r"[a-z]\w*" => <>.to_string(),
}

Num: i64 = {
    r"[0-9]+" => i64::from_str(<>).unwrap(),
}

Bool: bool = {
    "false" => false,
    "true" => true,
}

SumOp: OpCode = {
    "+" => OpCode::Add,
    "-" => OpCode::Sub,
}

ProductOp: OpCode = {
    "*" => OpCode::Mul,
    "/" => OpCode::Div,
}

CompOp: OpCode = {
    "==" => OpCode::Equals,
    "!=" => OpCode::NotEq,
    "<" => OpCode::Less,
    "<=" => OpCode::LessEq,
    ">" => OpCode::Greater,
    ">=" => OpCode::GreaterEq,
}

Box<T>: Box<T> = {
    <T> => Box::new(<>),
}

List0<T, Sep>: Vec<T> = {
    => Vec::new(),
    <ts:(<T> Sep)*> <t:T> => {
        let mut ts = ts;
        ts.push(t);
        ts
    },
}

BinOp<X, Op, Y>: Expr = {
    <x:X> <op:Op> <y:Y> => Expr::App(Box::new(Expr::PrimOp(op)), vec![x, y]),
}
