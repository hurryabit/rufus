{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","props","loadExamples","a","fetch","response","json","examples","setState","length","loadExample","file","console","error","message","example_file","text","program","alert","loadWasm","wasm","handleExampleSelect","event","target","value","handleProgramChange","currentTarget","handleProgramKeyDown","key","metaKey","handleRunClick","preventDefault","state","result","exec","status","get_value","ExecResultStatus","Ok","Err","output","this","Fragment","className","spellCheck","rows","onChange","onKeyDown","map","name","type","readOnly","onClick","href","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4b3ddaf1.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst EXAMPLES_DIR: string = '/rufus/examples';\n\nconst EDITOR_ROWS: number = 15;\n\ntype Props = {};\n\ntype Example = {\n  name: string;\n  file: string;\n}\n\ntype State = {\n  wasm: typeof import('rufus-wasm') | null;\n  program: string;\n  output: string;\n  result: string;\n  examples: Example[];\n}\n\nclass App extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      wasm: null,\n      program: '',\n      output: '',\n      result: '',\n      examples: [],\n    };\n  }\n  componentDidMount() {\n    this.loadExamples();\n    this.loadWasm();\n  }\n\n  loadExamples = async () => {\n    try {\n      const response = await fetch(`${EXAMPLES_DIR}/index.json`);\n      const examples: Example[] = await response.json();\n      this.setState({ examples });\n      if (examples.length > 0) {\n        this.loadExample(examples[0].file);\n      }\n    } catch (err) {\n      console.error(`Unexptected error in loadExamples. [Message: ${err.message}]`);\n    }\n  }\n\n  loadExample = async (example_file: string) => {\n    try {\n      const response = await fetch(`${EXAMPLES_DIR}/${example_file}`);\n      const program = await response.text();\n      this.setState({ program });\n    } catch (err) {\n      console.error(`Unexpected error in handleExampleSelect. [Message: ${err.message}]`);\n      alert('Cannot load example. See console for details.');\n    }\n  }\n\n  loadWasm = async () => {\n    try {\n      const wasm = await import('rufus-wasm');\n      this.setState({ wasm });\n    } catch (err) {\n      console.error(`Unexpected error in loadWasm. [Message: ${err.message}]`);\n    }\n  }\n\n  handleExampleSelect = async (event: React.ChangeEvent<HTMLSelectElement>) => {\n    await this.loadExample(event.target.value);\n  }\n\n  handleProgramChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    this.setState({ program: event.currentTarget.value })\n  }\n\n  handleProgramKeyDown = (event: React.KeyboardEvent) => {\n    if (event.key === 'Enter' && event.metaKey) {\n      this.handleRunClick(event);\n    }\n  }\n\n  handleRunClick = (event: React.SyntheticEvent) => {\n    event.preventDefault();\n    const wasm = this.state.wasm;\n    if (!wasm) {\n      alert(\"WASM not loaded!\");\n      return;\n    }\n    const result = wasm.exec(this.state.program);\n    const status = result.status;\n    const value = result.get_value();\n    switch (status) {\n      case wasm.ExecResultStatus.Ok:\n        this.setState({ result: value });\n        break;\n      case wasm.ExecResultStatus.Err:\n        alert(value);\n        break;\n    }\n  }\n\n  render() {\n    const state = this.state;\n    return (\n      <React.Fragment>\n        <section className=\"hero is-info\">\n          <div className=\"hero-body\">\n            <div className=\"container\">\n              <h1 className=\"title\">\n                rufus\n              </h1>\n              <h2 className=\"subtitle\">\n                An experiment about a CEK machine implemented in Rust,\n                compiled to Web Assembly and made alive via Typescript + React.\n              </h2>\n            </div>\n          </div>\n        </section>\n        <section className=\"section\">\n          <div className=\"container\">\n            <div className=\"field\">\n              <label className=\"label\">Program</label>\n              <div className=\"control\">\n                <textarea\n                  className=\"textarea is-family-code\"\n                  spellCheck={false}\n                  rows={EDITOR_ROWS}\n                  value={state.program}\n                  onChange={this.handleProgramChange}\n                  onKeyDown={this.handleProgramKeyDown}\n                />\n              </div>\n            </div>\n            <div className=\"columns\">\n              <div className=\"column is-2\">\n                <div className=\"field\">\n                  <label className=\"label\">Example</label>\n                  <div className=\"control select is-fullwidth\">\n                    <select onChange={this.handleExampleSelect}>\n                      {\n                        state.examples.map(({name, file}) => (<option value={file}>{name}</option>))\n                      }\n                    </select>\n                  </div>\n                </div>\n              </div>\n              <div className=\"column is-8\">\n                <div className=\"field\">\n                  <label className=\"label\">Result</label>\n                  <div className=\"control\">\n                    <input\n                      className=\"input is-family-code\"\n                      type=\"text\"\n                      readOnly\n                      value={state.result}\n                    />\n                  </div>\n                </div>\n              </div>\n              <div className=\"column is-2\">\n                <div className=\"field\">\n                  <label className=\"label\">&nbsp;</label>\n                  <div className=\"control\">\n                    <button\n                      className=\"button is-fullwidth is-info\"\n                      onClick={this.handleRunClick}\n                    >\n                      Run\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </section>\n        <footer className=\"footer\">\n          <div className=\"content has-text-centered\">\n            © 2019–2021 <a href=\"https://github.com/hurryabit/rufus\" target=\"blank\">Martin Huschenbett</a>\n          </div>\n        </footer>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}