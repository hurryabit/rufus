{"version":3,"sources":["../node_modules/rufus/rufus_wasm.js"],"names":["cachegetInt32Memory","cachedTextDecoder","TextDecoder","ignoreBOM","fatal","cachegetUint8Memory","getUint8Memory","buffer","Uint8Array","getStringFromWasm","ptr","len","decode","subarray","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encodeString","encodeInto","arg","view","buf","encode","set","read","length","written","exec","program","ret","mem","offset","code","charCodeAt","slice","passStringToWasm","ExecResult","__wrap","ExecResultStatus","Object","freeze","Ok","Err","this","key","value","memi32","Int32Array","v0","retptr","get","arg0","obj","create","prototype","__wbindgen_throw","arg1","Error"],"mappings":"2GAAA,mNAGIA,EAAsB,KAU1B,IAAIC,EAAoB,IAAIC,YAAY,QAAS,CAC/CC,WAAW,EACXC,OAAO,IAELC,EAAsB,KAE1B,SAASC,IAKP,OAJ4B,OAAxBD,GAAgCA,EAAoBE,SAAW,IAAYA,SAC7EF,EAAsB,IAAIG,WAAW,IAAYD,SAG5CF,EAGT,SAASI,EAAkBC,EAAKC,GAC9B,OAAOV,EAAkBW,OAAON,IAAiBO,SAASH,EAAKA,EAAMC,IAGvE,IAAIG,EAAkB,EAClBC,EAAoB,IAAIC,YAAY,SACpCC,EAAuD,oBAAjCF,EAAkBG,WAA4B,SAAUC,EAAKC,GACrF,OAAOL,EAAkBG,WAAWC,EAAKC,IACvC,SAAUD,EAAKC,GACjB,IAAIC,EAAMN,EAAkBO,OAAOH,GAEnC,OADAC,EAAKG,IAAIF,GACF,CACLG,KAAML,EAAIM,OACVC,QAASL,EAAII,SAsCV,SAASE,EAAKC,GACnB,IAAIC,EAAM,IAnCZ,SAA0BV,GAQxB,IAPA,IAAIR,EAAMQ,EAAIM,OAEVf,EAAM,IAAuBC,GAE7BmB,EAAMxB,IACNyB,EAAS,EAENA,EAASpB,EAAKoB,IAAU,CAC7B,IAAIC,EAAOb,EAAIc,WAAWF,GAC1B,GAAIC,EAAO,IAAM,MACjBF,EAAIpB,EAAMqB,GAAUC,EAGtB,GAAID,IAAWpB,EAAK,CACH,IAAXoB,IACFZ,EAAMA,EAAIe,MAAMH,IAGlBrB,EAAM,IAAwBA,EAAKC,EAAKA,EAAMoB,EAAsB,EAAbZ,EAAIM,QAC3D,IAAIL,EAAOd,IAAiBO,SAASH,EAAMqB,EAAQrB,EAAMC,GAEzDoB,GADUd,EAAaE,EAAKC,GACdM,QAIhB,OADAZ,EAAkBiB,EACXrB,EASayB,CAAiBP,GAAUd,GAC/C,OAAOsB,EAAWC,OAAOR,GAKpB,IAAIS,EAAmBC,OAAOC,OAAO,CAC1CC,GAAI,EACJC,IAAK,IAKIN,EAEX,WACE,SAASA,IACP,YAAgBO,KAAMP,GAwDxB,OArDA,YAAaA,EAAY,CAAC,CACxBQ,IAAK,OACLC,MAAO,WACL,IAAInC,EAAMiC,KAAKjC,IACfiC,KAAKjC,IAAM,EAEX,IAA2BA,KAM5B,CACDkC,IAAK,YAKLC,MAAO,WACL,IACInC,EAAMiC,KAAKjC,IACfiC,KAAKjC,IAAM,EACD,IAHG,EAG+BA,GAA5C,IACIoC,GApHoB,OAAxB9C,GAAgCA,EAAoBO,SAAW,IAAYA,SAC7EP,EAAsB,IAAI+C,WAAW,IAAYxC,SAG5CP,GAiHCgD,EAAKvC,EAAkBqC,EAAOG,GAAiBH,EAAOG,IAAiBf,QAI3E,OAFA,IAAqBY,EAAOG,GAA0C,EAAzBH,EAAOG,IAE7CD,IAER,CACDJ,IAAK,SACLM,IAAK,WAGH,OAFU,IAAiCP,KAAKjC,MAQlDa,IAAK,SAAa4B,GAChB,IAAiCR,KAAKjC,IAAKyC,MAE3C,CAAC,CACHP,IAAK,SACLC,MAAO,SAAgBnC,GACrB,IAAI0C,EAAMb,OAAOc,OAAOjB,EAAWkB,WAEnC,OADAF,EAAI1C,IAAMA,EACH0C,MAIJhB,EA1DT,GA4DWmB,EAAmB,SAA0BJ,EAAMK,GAC5D,MAAM,IAAIC,MAAMhD,EAAkB0C,EAAMK,M","file":"static/js/3.ef421bb6.chunk.js","sourcesContent":["import _classCallCheck from \"/Users/Martin/GitHub/rufus/rufus-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Martin/GitHub/rufus/rufus-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport * as wasm from './rufus_wasm_bg.wasm';\nvar cachegetInt32Memory = null;\n\nfunction getInt32Memory() {\n  if (cachegetInt32Memory === null || cachegetInt32Memory.buffer !== wasm.memory.buffer) {\n    cachegetInt32Memory = new Int32Array(wasm.memory.buffer);\n  }\n\n  return cachegetInt32Memory;\n}\n\nvar cachedTextDecoder = new TextDecoder('utf-8', {\n  ignoreBOM: true,\n  fatal: true\n});\nvar cachegetUint8Memory = null;\n\nfunction getUint8Memory() {\n  if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== wasm.memory.buffer) {\n    cachegetUint8Memory = new Uint8Array(wasm.memory.buffer);\n  }\n\n  return cachegetUint8Memory;\n}\n\nfunction getStringFromWasm(ptr, len) {\n  return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nvar WASM_VECTOR_LEN = 0;\nvar cachedTextEncoder = new TextEncoder('utf-8');\nvar encodeString = typeof cachedTextEncoder.encodeInto === 'function' ? function (arg, view) {\n  return cachedTextEncoder.encodeInto(arg, view);\n} : function (arg, view) {\n  var buf = cachedTextEncoder.encode(arg);\n  view.set(buf);\n  return {\n    read: arg.length,\n    written: buf.length\n  };\n};\n\nfunction passStringToWasm(arg) {\n  var len = arg.length;\n\n  var ptr = wasm.__wbindgen_malloc(len);\n\n  var mem = getUint8Memory();\n  var offset = 0;\n\n  for (; offset < len; offset++) {\n    var code = arg.charCodeAt(offset);\n    if (code > 0x7F) break;\n    mem[ptr + offset] = code;\n  }\n\n  if (offset !== len) {\n    if (offset !== 0) {\n      arg = arg.slice(offset);\n    }\n\n    ptr = wasm.__wbindgen_realloc(ptr, len, len = offset + arg.length * 3);\n    var view = getUint8Memory().subarray(ptr + offset, ptr + len);\n    var ret = encodeString(arg, view);\n    offset += ret.written;\n  }\n\n  WASM_VECTOR_LEN = offset;\n  return ptr;\n}\n/**\n* @param {string} program\n* @returns {ExecResult}\n*/\n\n\nexport function exec(program) {\n  var ret = wasm.exec(passStringToWasm(program), WASM_VECTOR_LEN);\n  return ExecResult.__wrap(ret);\n}\n/**\n*/\n\nexport var ExecResultStatus = Object.freeze({\n  Ok: 0,\n  Err: 1\n});\n/**\n*/\n\nexport var ExecResult =\n/*#__PURE__*/\nfunction () {\n  function ExecResult() {\n    _classCallCheck(this, ExecResult);\n  }\n\n  _createClass(ExecResult, [{\n    key: \"free\",\n    value: function free() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n\n      wasm.__wbg_execresult_free(ptr);\n    }\n    /**\n    * @returns {number}\n    */\n\n  }, {\n    key: \"get_value\",\n\n    /**\n    * @returns {string}\n    */\n    value: function get_value() {\n      var retptr = 8;\n      var ptr = this.ptr;\n      this.ptr = 0;\n      var ret = wasm.execresult_get_value(retptr, ptr);\n      var memi32 = getInt32Memory();\n      var v0 = getStringFromWasm(memi32[retptr / 4 + 0], memi32[retptr / 4 + 1]).slice();\n\n      wasm.__wbindgen_free(memi32[retptr / 4 + 0], memi32[retptr / 4 + 1] * 1);\n\n      return v0;\n    }\n  }, {\n    key: \"status\",\n    get: function get() {\n      var ret = wasm.__wbg_get_execresult_status(this.ptr);\n\n      return ret;\n    }\n    /**\n    * @param {number} arg0\n    */\n    ,\n    set: function set(arg0) {\n      wasm.__wbg_set_execresult_status(this.ptr, arg0);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(ExecResult.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }]);\n\n  return ExecResult;\n}();\nexport var __wbindgen_throw = function __wbindgen_throw(arg0, arg1) {\n  throw new Error(getStringFromWasm(arg0, arg1));\n};"],"sourceRoot":""}