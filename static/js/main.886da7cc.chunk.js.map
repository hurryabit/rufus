{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","props","loadWasm","a","wasm","setState","console","error","message","handleProgramChange","event","program","currentTarget","value","handleProgramKeyDown","key","metaKey","handleRunClick","preventDefault","state","result","exec","status","get_value","ExecResultStatus","Ok","Err","alert","output","this","Fragment","Container","Row","Col","Jumbotron","xs","Form","Group","Label","className","rows","onChange","onKeyDown","Button","variant","type","onClick","Control","as","readOnly","href","target","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2VAkJeA,G,wBAjIb,WAAYC,GAAe,IAAD,8BACxB,4CAAMA,KAYRC,SAb0B,sBAaf,4BAAAC,EAAA,+EAEY,6BAFZ,OAEDC,EAFC,OAGP,EAAKC,SAAS,CAACD,SAHR,gDAKPE,QAAQC,MAAR,kDAAyD,KAAIC,QAA7D,MALO,yDAbe,EAsB1BC,oBAAsB,SAACC,GACrB,EAAKL,SAAS,CAACM,QAASD,EAAME,cAAcC,SAvBpB,EA0B1BC,qBAAuB,SAACJ,GACJ,UAAdA,EAAMK,KAAmBL,EAAMM,SACjC,EAAKC,eAAeP,IA5BE,EAgC1BO,eAAiB,SAACP,GAChBA,EAAMQ,iBACN,IAAMd,EAAO,EAAKe,MAAMf,KACxB,GAAKA,EAAL,CAIA,IAAMgB,EAAShB,EAAKiB,KAAK,EAAKF,MAAMR,SAC9BW,EAASF,EAAOE,OAChBT,EAAQO,EAAOG,YACrB,OAAQD,GACN,KAAKlB,EAAKoB,iBAAiBC,GACzB,EAAKpB,SAAS,CAACe,OAAQP,IACvB,MACF,KAAKT,EAAKoB,iBAAiBE,IACzBC,MAAMd,SAXRc,MAAM,qBAlCR,EAAKR,MAAQ,CACXf,KAAM,KACNO,QAAS,GACTiB,OAAQ,GACRR,OAAQ,IANc,E,iFAUxBS,KAAK3B,a,+BA2CL,IAAMiB,EAAQU,KAAKV,MACnB,OACE,kBAAC,IAAMW,SAAP,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,qCACA,2IAON,kBAACF,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKE,GAAI,GACP,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,KACE,kBAACD,EAAA,EAAKE,MAAN,iBACA,8BACEC,UAAU,eACVC,KAvFQ,GAwFR3B,MAAOM,EAAMR,QACb8B,SAAUZ,KAAKpB,oBACfiC,UAAWb,KAAKf,wBAGpB,kBAACsB,EAAA,EAAKC,MAAN,KACE,kBAACD,EAAA,EAAKE,MAAN,aACA,kBAACK,EAAA,EAAD,CACEC,QAAQ,UACRL,UAAU,YACVM,KAAK,SACLC,QAASjB,KAAKZ,gBAJhB,UAWN,kBAACgB,EAAA,EAAD,CAAKE,GAAI,GACP,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,KACE,kBAACD,EAAA,EAAKE,MAAN,gBACA,kBAACF,EAAA,EAAKW,QAAN,CACEC,GAAG,WACHC,UAAQ,EACRT,KAjHQ,GAkHR3B,MAAOM,EAAMS,UAGjB,kBAACQ,EAAA,EAAKC,MAAN,KACE,kBAACD,EAAA,EAAKE,MAAN,gBACA,kBAACF,EAAA,EAAKW,QAAN,CACEF,KAAK,OACLI,UAAQ,EACRpC,MAAOM,EAAMC,cAOzB,4BAAQmB,UAAU,gBAChB,yBAAKA,UAAU,qCACb,0BAAMA,UAAU,cAAhB,aACS,uBAAGW,KAAK,qCAAqCC,OAAO,SAApD,8B,GAzHHC,IAAMC,YCJJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.886da7cc.chunk.js","sourcesContent":["import React from 'react';\nimport { Button, Col, Container, Form, Jumbotron, Row } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\nconst EDITOR_ROWS: number = 12;\n\ntype Props = {};\n\ntype State = {\n  wasm: typeof import('rufus') | null;\n  program: string;\n  output: string;\n  result: string;\n}\n\nclass App extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      wasm: null,\n      program: '',\n      output: '',\n      result: '',\n    };\n  }\n  componentDidMount() {\n    this.loadWasm();\n  }\n\n  loadWasm = async () => {\n    try {\n      const wasm = await import('rufus');\n      this.setState({wasm});\n    } catch(err) {\n      console.error(`Unexpected error in loadWasm. [Message: ${err.message}]`);\n    }\n  }\n\n  handleProgramChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    this.setState({program: event.currentTarget.value})\n  }\n\n  handleProgramKeyDown = (event: React.KeyboardEvent) => {\n    if (event.key === 'Enter' && event.metaKey) {\n      this.handleRunClick(event);\n    }\n  }\n\n  handleRunClick = (event: React.SyntheticEvent) => {\n    event.preventDefault();\n    const wasm = this.state.wasm;\n    if (!wasm) {\n      alert(\"WASM not loaded!\");\n      return;\n    }\n    const result = wasm.exec(this.state.program);\n    const status = result.status;\n    const value = result.get_value();\n    switch (status) {\n      case wasm.ExecResultStatus.Ok:\n        this.setState({result: value});\n        break;\n      case wasm.ExecResultStatus.Err:\n        alert(value);\n        break;\n    }\n  }\n\n  render() {\n    const state = this.state;\n    return (\n      <React.Fragment>\n        <Container>\n          <Row>\n            <Col>\n              <Jumbotron>\n                <h1>rufus</h1>\n                <p>\n                  An experiment about a CEK machine implemented in Rust,\n                  compiled to Web Assembly and made alive via React.\n                </p>\n              </Jumbotron>\n            </Col>\n          </Row>\n          <Row>\n            <Col xs={8}>\n              <Form>\n                <Form.Group>\n                  <Form.Label>Program:</Form.Label>\n                  <textarea\n                    className='form-control'\n                    rows={EDITOR_ROWS}\n                    value={state.program}\n                    onChange={this.handleProgramChange}\n                    onKeyDown={this.handleProgramKeyDown}\n                  />\n                </Form.Group>\n                <Form.Group>\n                  <Form.Label>&nbsp;</Form.Label>\n                  <Button\n                    variant=\"primary\"\n                    className='btn-block'\n                    type=\"submit\"\n                    onClick={this.handleRunClick}\n                  >\n                    Run\n                  </Button>\n                </Form.Group>\n              </Form>\n            </Col>\n            <Col xs={4}>\n              <Form>\n                <Form.Group>\n                  <Form.Label>Output:</Form.Label>\n                  <Form.Control\n                    as=\"textarea\"\n                    readOnly\n                    rows={EDITOR_ROWS}\n                    value={state.output}\n                  />\n                </Form.Group>\n                <Form.Group>\n                  <Form.Label>Result:</Form.Label>\n                  <Form.Control\n                    type='text'\n                    readOnly\n                    value={state.result}\n                  />\n                </Form.Group>\n              </Form>\n            </Col>\n          </Row>\n        </Container>\n        <footer className=\"fixed-bottom\">\n          <div className=\"footer-copyright text-center py-1\">\n            <span className=\"text-muted\">\n              Â© 2019 <a href=\"https://github.com/hurryabit/rufus\" target=\"blank\">Martin Huschenbett</a>\n            </span>\n          </div>\n        </footer>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}