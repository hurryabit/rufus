use std::str::FromStr;

use crate::syntax::*;

grammar;

Expr = Boxed<ExprUnboxed>;

pub ExprUnboxed: Expr = {
    "let" <Name> "=" <Expr> ";" <Expr> => Expr::Let(<>),
    <SimpleExprUnboxed>,
};

SimpleExpr = Boxed<SimpleExprUnboxed>;

SimpleExprUnboxed: Expr = {
    Name => Expr::Var(<>, None),
    Num => Expr::Num(<>),
    <Opcode> "(" <SimpleExpr> "," <SimpleExpr> ")" => Expr::Op(<>),
    <f:Name> "(" <xs:CommaList0<SimpleExprUnboxed>> ")" => Expr::App(Box::new(Expr::Var( f, None)), xs),
    "|" <CommaList0<Name>> "|" <Expr> => Expr::Lam(<>),
    "print" "(" <Expr> ")" => Expr::Print(<>),
    "(" <SimpleExprUnboxed> ")",
    "{" <ExprUnboxed> "}"
};

Name: Name = {
    r"[a-z]\w*" => Name(<>.to_string())
};

Num: i64 = {
    r"[0-9]+" => i64::from_str(<>).unwrap()
};

Opcode: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
}

Boxed<T>: Box<T> = {
    <T> => Box::new(<>)
}

CommaList0<T>: Vec<T> = {
    => Vec::new(),
    <ts:(<T> ",")*> <t:T> => {
        let mut ts = ts;
        ts.push(t);
        ts
    }
}
