use std::str::FromStr;

use crate::syntax::*;

grammar;

pub Expr = Boxed<ExprUnboxed>;

ExprUnboxed: Expr = {
    Name => Expr::Var(<>),
    Num => Expr::Num(<>),
    <Opcode> "(" <Expr> "," <Expr> ")" => Expr::Op(<>),
    <Name> "(" <CommaList0<ExprUnboxed>> ")" => Expr::App(<>),
    "let" <Name> "=" <Expr> ";" <Expr> => Expr::Let(<>),
    "|" <CommaList0<Name>> "|" "{" <Expr> "}" => Expr::Lam(<>),
    "(" <ExprUnboxed> ")",
};

Name: Name = {
    r"[a-z]\w*" => Name(<>.to_string())
};

Num: i64 = {
    r"[0-9]+" => i64::from_str(<>).unwrap()
};

Opcode: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
}

Boxed<T>: Box<T> = {
    <T> => Box::new(<>)
}

CommaList0<T>: Vec<T> = {
    <ts:(<T> ",")*> <t:T> => {
        let mut ts = ts;
        ts.push(t);
        ts
    }
}
